import type { SortFields } from "../../types"
import {
  getSeasons,
  getSeasonStats,
  getConfigValue,
} from "../../actions/serverRequests"
import SeasonWeeksHandler from "../../components/SeasonWeeksHandler"

export const metadata = {
  title: "Pick6 - Season",
  description: "Generated by create next app",
}

export default async function Season(props: {
  searchParams?: Promise<{
    search?: string
    season?: string
    sort?: "asc" | "desc"
    fields?: string
  }>
}) {
  const searchParams = await props.searchParams
  const searchTerm = searchParams.search ?? ""
  const currentSeason = Number(
    searchParams.season ?? (await getConfigValue("CURRENT_SEASON")),
  )
  const sort = searchParams.sort
    ? searchParams.sort === "asc" || searchParams.sort === "desc"
      ? searchParams.sort
      : "asc"
    : "asc"
  const fields: Array<SortFields> = searchParams.fields
    ? searchParams.fields
        .split(",")
        .filter(
          (field) =>
            field === "gp" ||
            field === "group_number" ||
            field === "rank" ||
            field === "none",
        ).length > 0
      ? (searchParams.fields.split(",") as Array<SortFields>)
      : ["rank"]
    : ["rank"]
  const seasons = await getSeasons()
  const seasonStats = await getSeasonStats(currentSeason, sort, fields)
  const filteredSeasonStats = seasonStats.filter((stat) =>
    stat.player_name.includes(searchTerm),
  )
  const seasonID = seasons.find(
    (season) => season.season_number == currentSeason,
  )?.season_id
  const columnWidths = {
    rank: { small: 30, medium: 60, large: 50 },
    gp: { small: 30, medium: 60, large: 150 },
    group_number: { small: 30, medium: 60, large: 150 },
    win_percentage: { small: 30, medium: 60, large: 150 },
    won: { small: 30, medium: 60, large: 150 },
    played: { small: 55, medium: 60, large: 150 },
    player_name: { small: 105, medium: 160, large: 150 },
  }
  return (
    <div className="absolute left-[50px] top-0 flex min-h-full w-[calc(100%-50px)] flex-col items-center overflow-x-hidden text-center">
      <h1 className="mt-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl">
        Season Stats
      </h1>
      {seasons.length > 0 ? (
        seasonID ? (
          <SeasonWeeksHandler
            currentSeason={currentSeason}
            currentWeek={undefined}
            sort={sort}
            sortFields={fields}
            selectedId={seasonID}
            selectOptions={seasons}
            data={filteredSeasonStats}
            originalDataExists={seasonStats.length > 0}
            headers={["Rank", "#", "GP", "Player", "Won", "Played", "%"]}
            columnWidths={columnWidths}
          />
        ) : (
          <span className="text-red-500">
            Season {currentSeason} does not exist
          </span>
        )
      ) : (
        <h3 className="text-red-500">No seasons exist</h3>
      )}
    </div>
  )
}
