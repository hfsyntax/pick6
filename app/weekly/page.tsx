import type { SortFields, PickResult } from "../../types"
import {
  getWeeks,
  getPicks,
  getConfigValue,
} from "../../actions/serverRequests"
import SeasonWeeksHandler from "../../components/SeasonWeeksHandler"

export const metadata = {
  title: "Pick6 - Weekly",
  description: "Generated by create next app",
}

export default async function Weekly(props: {
  searchParams?: Promise<{
    search?: string
    season?: string
    week?: string
    sort?: "asc" | "desc"
    fields?: string
  }>
}) {
  const searchParams = await props.searchParams
  const searchTerm = searchParams.search ?? ""
  const currentSeason =
    searchParams.season ?? (await getConfigValue("CURRENT_SEASON"))
  const currentWeek =
    searchParams.week ?? (await getConfigValue("CURRENT_WEEK"))
  const sort = searchParams.sort
    ? searchParams.sort === "asc" || searchParams.sort === "desc"
      ? searchParams.sort
      : "asc"
    : "asc"
  const fields: Array<SortFields> = searchParams.fields
    ? searchParams.fields
        .split(",")
        .filter(
          (field) =>
            field === "gp" ||
            field === "group_number" ||
            field === "rank" ||
            field === "none",
        ).length > 0
      ? (searchParams.fields.split(",") as Array<SortFields>)
      : ["rank"]
    : ["rank"]
  const weeks = await getWeeks()
  const weekID = weeks.find(
    (week) =>
      week.season_number == currentSeason && week.week_number == currentWeek,
  )?.week_id
  const picks = await getPicks(currentSeason, currentWeek, sort, fields)
  const filteredPicks = picks.picks.filter((pick) =>
    pick.player_name.includes(searchTerm),
  )
  const columnWidths = {
    rank: { small: 25, medium: 35, large: 50 },
    gp: { small: 25, medium: 35, large: 50 },
    group_number: { small: 25, medium: 35, large: 50 },
    win_percentage: { small: 25, medium: 35, large: 50 },
    won: { small: 25, medium: 35, large: 50 },
    played: { small: 50, medium: 50, large: 50 },
    player_name: { small: 100, medium: 140, large: 150 },
    pick1: { small: 60, medium: 90, large: 90 },
    pick2: { small: 60, medium: 90, large: 90 },
    pick3: { small: 60, medium: 90, large: 90 },
    pick4: { small: 60, medium: 90, large: 90 },
    pick5: { small: 60, medium: 90, large: 90 },
    pick6: { small: 60, medium: 90, large: 90 },
  }

  for (let i = 1; i <= 6; i++) {
    if (!picks.headers.includes(`pick${i}`)) {
      delete columnWidths[`pick${i}`]
    }
  }

  return (
    <div className="absolute left-[50px] top-0 flex min-h-full w-[calc(100%-50px)] flex-col items-center overflow-x-hidden text-center">
      <h1 className="mt-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl">
        Week Picks
      </h1>
      {weeks.length > 0 ? (
        weekID ? (
          <SeasonWeeksHandler
            currentSeason={currentSeason}
            currentWeek={currentWeek}
            sort={sort}
            sortFields={fields}
            selectedId={weekID}
            selectOptions={weeks}
            data={filteredPicks}
            originalDataExists={picks.picks.length > 0}
            headers={picks.headers}
            columnWidths={columnWidths}
          />
        ) : (
          <span className="text-red-500">
            Week {currentWeek} does not exist for Season {currentSeason}
          </span>
        )
      ) : (
        <h3 className="text-red-500">No weeks exist</h3>
      )}
    </div>
  )
}
